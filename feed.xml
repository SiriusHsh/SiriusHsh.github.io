<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://siriushsh.github.io/</id><title>SiriusHsh</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-03-19T13:20:46+08:00</updated> <author> <name>sirius</name> <uri>https://siriushsh.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://siriushsh.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://siriushsh.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2023 sirius </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>书籍整理</title><link href="https://siriushsh.github.io/posts/%E4%B9%A6%E7%B1%8D%E6%95%B4%E7%90%86/" rel="alternate" type="text/html" title="书籍整理" /><published>2023-01-01T20:32:00+08:00</published> <updated>2023-01-01T20:32:00+08:00</updated> <id>https://siriushsh.github.io/posts/%E4%B9%A6%E7%B1%8D%E6%95%B4%E7%90%86/</id> <content src="https://siriushsh.github.io/posts/%E4%B9%A6%E7%B1%8D%E6%95%B4%E7%90%86/" /> <author> <name>sirius</name> </author> <category term="书籍" /> <summary> 程序员的自我修养—链接、装载与库 ——- 2022-12-02 ——– 应该是看了4天 更像是GNU工具书，正如其副标题，事无巨细的介绍了程序链接、装载和运行库的方方面面，介绍的非常透彻。 内容包含： ELF结构（尤其是与链接相关的，符号表、重定位表等） 静态链接（怎么做的重定位与符号解析，GOT表，解决符号冲突） 装载的过程（VMA，页表映射，缺页中断） 由装载引出动态链接的概念（为什么要动态链接，地址无关代码，lazy binding，PLT，动态链接器的实现） Linux共享库的介绍（版本号，怎么组织的，LD_LIBRARY_PATH，LD_PRELOAD， gcc命令中的-Wl啥的作用，-lXXX相当于链接libXXXX.so.x.x.x） 运行库（简单介绍了_start -&amp;gt; _libc_start_main -&amp;gt; ini... </summary> </entry> <entry><title>pwn学习资料汇总</title><link href="https://siriushsh.github.io/posts/Pwn%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/" rel="alternate" type="text/html" title="pwn学习资料汇总" /><published>2022-09-21T20:39:00+08:00</published> <updated>2022-09-21T23:21:23+08:00</updated> <id>https://siriushsh.github.io/posts/Pwn%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</id> <content src="https://siriushsh.github.io/posts/Pwn%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/" /> <author> <name>sirius</name> </author> <category term="CTF" /> <category term="pwn" /> <summary> 塞了一堆PDF！！卡爆预警！！！ 记录一下我学习pwn时看的资料~~ 我学习知识，习惯从树干-树枝-树叶的节奏来推进。先打好基础，再一步步深入，避免一开始就深入细节，陷入牛角尖。 NTUSTISC - Pwn Basic pwn入门的绝佳教材，还有配套的练习题。 涵盖知识点： https://www.youtube.com/watch?v=8zO47WDUdIk&amp;amp;t=751s pwn basic angelboy series 一系列教材，讲的非常好。 学完NTUSTISC - Pwn Basic，了解基本的linux和ELF知识，学会stack overflow的利用 然后学习angelboy的pwn课程，复习stack overflow，再继续学习format string attack、heap利用、I... </summary> </entry> <entry><title>pwn cheatsheet</title><link href="https://siriushsh.github.io/posts/pwn-cheatsheet/" rel="alternate" type="text/html" title="pwn cheatsheet" /><published>2022-09-21T20:32:00+08:00</published> <updated>2023-03-19T13:16:53+08:00</updated> <id>https://siriushsh.github.io/posts/pwn-cheatsheet/</id> <content src="https://siriushsh.github.io/posts/pwn-cheatsheet/" /> <author> <name>sirius</name> </author> <category term="CTF" /> <category term="pwn" /> <summary> 0x01 ROPgadget命令 ROPgadget --binary ./elf --string "/bin/sh" ROPgadget --binary ./elf --only "pop|ret" | grep rdi 0x02 gcc编译指定libc版本 gcc example.c -o example2.23 -Wl,-rpath='./libc-2.23/' -Wl,-dynamic-linker='./libc-2.23/ld-2.23.so' 0x03 gcc安全编译选项 CANNARY gcc -fno-stack-protector -o test test.c //禁用栈保护 gcc -fstack-protector -o test test.c //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码 gcc -fsta... </summary> </entry> <entry><title>IO_FILE学习笔记</title><link href="https://siriushsh.github.io/posts/IO_FILE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="IO_FILE学习笔记" /><published>2022-09-15T20:32:00+08:00</published> <updated>2023-03-19T13:16:53+08:00</updated> <id>https://siriushsh.github.io/posts/IO_FILE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id> <content src="https://siriushsh.github.io/posts/IO_FILE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" /> <author> <name>sirius</name> </author> <category term="CTF" /> <category term="pwn" /> <summary> 本篇博客重实践，记录一下学习过程、踩坑经历，以及很重要的是我自己对IO_FILE利用的理解。 File Sturcture的基础知识就不写了，前人们的资料已经非常齐全了，我单独写出来也只会把内容揉碎了，这并不好。 abusing-the-file-structure Play with FILE Structure Yet Another Binary Exploitation Technique (whitepaper) Play with FILE Structure Yet Another Binary Exploitation Technique (slide) struct _IO_FILE { int _flags; /* High-order word is _IO_MAGIC; rest is flags. */ #define _IO_f... </summary> </entry> <entry><title>format string attack学习笔记</title><link href="https://siriushsh.github.io/posts/format-string-attack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="format string attack学习笔记" /><published>2022-08-15T20:32:00+08:00</published> <updated>2023-03-19T13:16:53+08:00</updated> <id>https://siriushsh.github.io/posts/format-string-attack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id> <content src="https://siriushsh.github.io/posts/format-string-attack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" /> <author> <name>sirius</name> </author> <category term="CTF" /> <category term="pwn" /> <summary> HITCON-training lab7-9 lab7 3个format string attck的题，格式化字符串认知还比较浅，边做边学习。 格式化字符串利用的本质：达成任意地址的读写 要达成格式化字符串利用，有两个关键： 1、找到printf(&amp;amp;buf)中这个buf是printf的第几个参数，在32位程序下，参数都是放在栈上，所以从栈顶esp开始算起，buf的地址是在栈上的第几个。在64位程序下，前6个参数在寄存器上，所以栈上的参数是从第7个开始。 ​ 要知道这个buf是第几个参数的原因是，可以知道我们后续要填入的目标地址（一般是地址）是第几个参数（从buf到要填入的地址 有时候需要padding），然后配合第二条，就可以向目标地址读或者写 2、利用%n$，表示是printf的第n+1个参数，可以精确控制到stack上的某个地址，（理解... </summary> </entry> </feed>
